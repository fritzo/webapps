
//==============================================================================
// 1326994044727.js

// devil's staircase scale

var gcd = function (a,b)
{
  if (b > a) { var temp = a; a = b; b = temp; }

  while (true) {
    a %= b;  if (a === 0) return b;
    b %= a;  if (b === 0) return a;
  }
};

var Rational = function (numer,denom) {
  this.numer = numer;
  this.denom = denom;
};

Rational.prototype = {
  toNumber: function(){
    return this.numer / this.denom;
  },
  norm: function(){
    return Math.sqrt(this.numer * this.numer + this.denom * this.denom);
  }
};

Rational.cmp = function (lhs, rhs) {
  return lhs.numer * rhs.denom - rhs.numer * lhs.denom;
};

Rational.ball = function (radius) {
  var result = [];
  for (var i = 1; i < radius; ++i) {
    for (var j = 1; j < radius; ++j) {
      if (gcd(i,j) !== 1) continue;
      var q = new Rational(i,j);
      if (q.norm() > radius) continue;
      result.push(q);
    }
  }
  result.sort(Rational.cmp);
  return result;
};
//print(Rational.ball(5).map(function(q){ return q.toNumber(); }));

var radius = 16;
var temperature = 3;
var totalTime = 4000;

var QQ = Rational.ball(radius);
vars.freqs = QQ.map(function(q){
  return middleC * q.toNumber();
});
var times = QQ.map(function(q){
  return Math.exp(-q.norm() / temperature);
});
var sum = times.reduce(function(x,y){ return x+y; });
var timeScale = totalTime / sum;
vars.times = times.map(function(t){ return timeScale * t; });

vars.starts = [0];
vars.ends = [vars.times[0]];
for (var i = 1; i < QQ.length; ++i) {
  vars.starts[i] = vars.starts[i-1] + vars.times[i-1];
  vars.ends[i] = vars.starts[i] + vars.times[i];
}

// Version 1. sequence of notes
nonce {
  vars.tones = [];
  for (var i = 0; i < QQ.length; ++i) {
    vars.tones[i] = tone({ frequency:vars.freqs[i], duration:vars.times[i] });
  }

  var wait = 50;
  for (var i = 0; i < vars.tones.length; ++i) {
    (function(i){ // take care when defining functions in a loop
      setTimeout(function(){ play(vars.tones[i]); }, wait + vars.starts[i]);
    })(i);
  }
}

// Version 2. a chirp
once {
  var samples = new Array(totalTime * sampleRate);
  var phase = 0;
  for (var i = 0, t = 0, T = samples.length; t < T; ++t) {
    while (t / sampleRate > vars.ends[i]) ++i;
    samples[t] = Math.sin(2 * Math.PI * phase);
    phase = (phase + vars.freqs[i] / sampleRate) % 1;
  }
  vars.scale = encodeWav(samples);

  play(vars.scale);
}

//==============================================================================
// 1324384763822.js

// faray tone scale (by hand):

var faray = function (depth) {
  if (depth === 0) return [[0,1],[1,0]];
  var prev = faray(depth - 1);
  var result = [prev[0]];
  for (var i = 1; i < prev.length; ++i) {
    var lhs = prev[i-1];
    var rhs = prev[i]
    result[2*i-1] = [lhs[0]+rhs[0],lhs[1]+rhs[1]];
    result[2*i] = rhs;
  }
  return result;
};

var points = faray(4);
points = points.slice(1,points.length-2);
//print(JSON.stringify(points));
print(points.map(function(q){return q[0]+'/'+q[1]}).join(' '));

var T = 300;
var note = function (freq) {
  return tone({ frequency: freq * middleC, duration:T, gain:0.2 });
};

vars.scale = vars.scale || points.map(function(q){
  return note(q[0]/q[1]);
});

vars.S = function () {
  vars.n = (vars.n === undefined) ? 0 : (vars.n + 1) % vars.scale.length;
  play(vars.scale[vars.n]);
  setTimeout(vars.S, T);
};

once vars.S(); // start
nonce clear(); // stop

//==============================================================================
// 1323324421097.js

// markov chain rhythm

var PERIOD = 3000;
var TATUM = PERIOD / 32;

// generate samples
vars.short = vars.short || noise({ duration:TATUM, gain:0.1 });
vars.long = vars.long || tone({
  frequency: middleC/4,
  duration: PERIOD/4,
  gain: 0.2
});

var show = function (symbol) {
  vars.chain = (symbol + (vars.chain || '')).slice(0,80);
  print(vars.chain);
};

var clampTimeout = function (callback, delay) {
  var clamped = Math.round((Date.now() + delay) / TATUM) * TATUM;
  setTimeout(callback, clamped - Date.now());
};

vars.L1 = function () {
  play(vars.long, Math.sqrt(Math.random()));
  show('|');
  clampTimeout(vars.L1, PERIOD/2);
};

vars.S1 = function () {
  play(vars.short);
  show('o');
  clampTimeout(Math.random() > 5/12 ? vars.S2 : vars.S1, PERIOD/5);
};

vars.S2 = function () {
  play(vars.short);
  show('-');
  clampTimeout(Math.random() > 5/12 ? vars.S2 : vars.S1, PERIOD/7);
};

once vars.L1(); // start one of these
once vars.S1(); // and a few of these
once vars.S1();
once vars.S1();

nonce clear(); // uncomment to stop

//==============================================================================
// 1323226133754.js

// simple rhythm:

var PERIOD = 2000;

vars.long = vars.long || noise({ duration:PERIOD/2, gain:0.05 });
vars.short = vars.short || noise({ duration:PERIOD/64, gain:0.1 });

var bass = function (f) {
  return tone({ duration:PERIOD/8, frequency:middleC*f, gain:0.2 });
};
vars.hi = vars.hi || bass(1/4);
vars.low = vars.low || bass(1/6);

var player = function (name) {
  return function () { play(vars[name]); };
};

vars.loop = function () {

  setTimeout(player('long'), PERIOD * 0/1);
  setTimeout(player('short'), PERIOD * 1/4);
  setTimeout(player('short'), PERIOD * 2/4);
  setTimeout(player('short'), PERIOD * 3/4);
  setTimeout(player('short'), PERIOD * 7/8);

  var r = Math.random;
  var lowTime = Math.round(1 + r() + r() + r() + r()) / 8;
  var hiTime = lowTime + Math.round(r() + r() + r()) / 8;
  setTimeout(player('low'), lowTime * PERIOD);
  setTimeout(player('hi'), hiTime * PERIOD);

  setTimeout(vars.loop, PERIOD);
};

once vars.loop(); // start a loop
nonce clear(); // stop

//==============================================================================
// 1323196209122.js

// juggling dots:

var X = function (a) { return (0.5 + Math.sin(2*a) / 3); };
var Y = function (a) { return (0.5 + Math.sin(3*a) / 3); };
var Z = function (a) { return (0.5 + Math.sin(8*a) / 2); };

always.juggle = function () {

  var T = 1000, t = (Date.now() % T) / T;
  context.clearRect(0, 0, innerWidth, innerHeight);
  context.font = 'bold 64pt Courier';
  for (var i = 0, N = 79; i < N; ++i) {
    var a = 2 * Math.PI * (i + t) / N;
    context.fillStyle = 'rgba(255,255,255,' + Z(a) + ')';
    context.fillText('.', innerWidth * X(a), innerHeight * Y(a));
  }
};

//==============================================================================
// 1323134327691.js

// test for text-shadow:

var N = 20;
var W = innerWidth;
var H = innerHeight;

context.fillStyle = '#aaaaaa';
context.fillRect(W / N, H / N, W * (1 - 2 / N), H * (1 - 2 / N));

//==============================================================================
// 1323050746049.js

// simple am sine wave:

var duration = 1000;
var gain = 0.2;
var freq = middleC;
var omega = 2 * Math.PI * freq / sampleRate;
var samples = new Array(Math.round(duration * sampleRate));

for (var t = 0, T = samples.length; t < T; ++t) {
  var envelope = gain * 4 * (t + 1) * (T - t) / (T * T);
  samples[t] = envelope * Math.sin(omega * t);
}

var uri = encodeWav(samples);
var audio = new Audio(uri);

once audio.play();

