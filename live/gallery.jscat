
//==============================================================================
// 1328587224268.js

// drifting uncoupled rhythm

var exp = Math.exp;
var random = Math.random;
var randomStd = function () {
  return 2 * (random() + random() + random()) - 3;
};
var driftStd = function (start, rate) {
  return start * (1 - rate) + randomStd() * rate;
};

live.advance = function (voice) {
  return function () {
    var r = voice.driftRate * exp(voice.delayParam);

    voice.mass = Math.max(0, Math.min(1, voice.mass + randomStd() * r));
    voice.delayParam = driftStd(voice.delayParam, r);
    voice.freqParam = driftStd(voice.freqParam, r);
    voice.bandParam = driftStd(voice.bandParam, r);

    var delay = 1000 * exp(2 * voice.delayParam);
    voice.duration = 0.5 * delay;
    voice.frequency = 100 * exp(voice.freqParam - voice.delayParam);
    voice.bandwidth = 0.005 * exp(voice.bandParam);
    voice.gain = Math.sqrt(voice.mass) / 7;

    setTimeout(live.advance(voice), delay);
    play(noise(voice));
  };
};

live.startVoice = function () {
  live.advance({
    driftRate: 1/120,
    mass: random(),
    delayParam: randomStd(),
    freqParam: randomStd(),
    bandParam: randomStd()
  })();
};

once for (var i = 0; i < 7; ++i) live.startVoice();

nonce clear(); // erase the 'n' to stop all voices
nonce live.startVoice(); // erase the 'n' to start another voice

//==============================================================================
// 1326994044727.js

// devil's staircase scale

var gcd = function (a,b)
{
  if (b > a) { var temp = a; a = b; b = temp; }

  while (true) {
    a %= b;  if (a === 0) return b;
    b %= a;  if (b === 0) return a;
  }
};

var Rational = function (numer,denom) {
  this.numer = numer;
  this.denom = denom;
};

Rational.prototype = {
  toNumber: function(){
    return this.numer / this.denom;
  },
  norm: function(){
    return Math.sqrt(this.numer * this.numer + this.denom * this.denom);
  }
};

Rational.cmp = function (lhs, rhs) {
  return lhs.numer * rhs.denom - rhs.numer * lhs.denom;
};

Rational.ball = function (radius) {
  var result = [];
  for (var i = 1; i < radius; ++i) {
    for (var j = 1; j < radius; ++j) {
      if (gcd(i,j) !== 1) continue;
      var q = new Rational(i,j);
      if (q.norm() > radius) continue;
      result.push(q);
    }
  }
  result.sort(Rational.cmp);
  return result;
};
//print(Rational.ball(5).map(function(q){ return q.toNumber(); }));

var radius = 16;
var temperature = 3;
var totalTime = 4000;
once {

  var QQ = Rational.ball(radius);
  live.freqs = QQ.map(function(q){
    return middleC * q.toNumber();
  });
  var times = QQ.map(function(q){
    return Math.exp(-q.norm() / temperature);
  });
  var sum = times.reduce(function(x,y){ return x+y; });
  var timeScale = totalTime / sum;
  live.times = times.map(function(t){ return timeScale * t; });

  live.starts = [0];
  live.ends = [live.times[0]];
  for (var i = 1; i < QQ.length; ++i) {
    live.starts[i] = live.starts[i-1] + live.times[i-1];
    live.ends[i] = live.starts[i] + live.times[i];
  }

  live.tones = [];
  for (var i = 0; i < QQ.length; ++i) {
    live.tones[i] = tone({ frequency:live.freqs[i], duration:live.times[i] });
  }
}

// Version 1. sequence of notes
nonce {
  var wait = 50;
  for (var i = 0; i < live.tones.length; ++i) {
    (function(i){ // take care when defining functions in a loop
      setTimeout(function(){ play(live.tones[i]); }, wait + live.starts[i]);
    })(i);
  }
}
nonce play(live.tones[0]);

// Version 2. a chirp
once {
  var samples = new Array(totalTime * sampleRate);
  var phase = 0;
  for (var i = 0, t = 0, T = samples.length; t < T; ++t) {
    while (t / sampleRate > live.ends[i]) ++i;
    samples[t] = Math.sin(2 * Math.PI * phase);
    phase = (phase + live.freqs[i] / sampleRate) % 1;
  }
  live.scale = WavEncoder.encode(samples);

  play(live.scale);
}

//==============================================================================
// 1324384763822.js

// faray tone scale (by hand):

var T = 500;

once { // generate samples
  var note = function (freq) {
    return tone({ frequency: freq * middleC, duration:T, gain:0.2 });
  };
  live.scale = [
    note( 1/1 ),
    note( 5/4 ),
    note( 4/3 ),
    note( 7/5 ),
    note( 3/2 ),
    note( 8/5 ),
    note( 5/3 ),
    note( 7/4 ),
    note( 2/1 )
  ];
}

live.S = function () {
  live.n = (live.n === undefined) ? 0 : (live.n + 1) % live.scale.length;
  play(live.scale[live.n]);
  setTimeout(live.S, T);
};

once live.S(); // start
nonce clear(); // stop

print(live.scale.length)

//==============================================================================
// 1323324421097.js

// markov chain rhythm

var PERIOD = 3000;

once { // generate samples
  live.long = noise({ duration:PERIOD/4, gain:0.05 });
  live.short = noise({ duration:PERIOD/32, gain:0.1 });
}

var show = function (symbol) {
  var chain = symbol + (live.chain || '');
  print(live.chain = chain.slice(0,80));
};

live.L1 = function () {
  play(live.long);
  show('|');
  setTimeout(live.L1, PERIOD/2);
};

live.S1 = function () {
  play(live.short);
  show('o');
  setTimeout(Math.random() > 5/12 ? live.S2 : live.S1, PERIOD/5);
};

live.S2 = function () {
  play(live.short);
  show('-');
  setTimeout(Math.random() > 5/12 ? live.S2 : live.S1, PERIOD/7);
};

once live.L1(); // start one of these
once live.S1(); // and a few of these
once live.S1();
once live.S1();

nonce sync.clear(); // uncomment to stop

//==============================================================================
// 1323297175694.js

// simple continuous-time task manager

live.Task = function (action, delay) { // TODO mass, sharpness, phase
  this.action = action;
  this.delay = delay;
  this.remaining = delay;
  live.add(this);
};

live.Task.updateAll = function () {
  var tasks = live.tasks;
  var time = Date.now;
  var dt = time - live.time;
  live.time = time;

  for (var i in tasks) {
    var task = tasks[i];
    if (task.remaining -= dt < 0) {
      try { task.action(); }
      catch (err) { error(err); }
      delete tasks[i];
    }
  }

  setTimeout(live.Task.updateAll, 10);
};

once live.Task.updateAll(); // start task manager

once {
  live.counter = 0;
  live.tasks = {};
  live.time = Date.now();
  live.add = function (task) {
    live.tasks[live.counter++] = task;
    print(live.counter); // DEBUG
  };
}

// an example
live.blip = function () {
  var W = innerWidth;
  var H = innerHeight;

  context.fillStyle = 'rgba(0,0,0,0.05)';
  context.fillRect(0,0,W,H);

  var random = Math.random;
  var random255 = function () { return Math.floor(256 * Math.random()); };

  context.fillStyle = 'rgba(R,G,B,0.5)'
    .replace('R', random255())
    .replace('G', random255())
    .replace('B', random255());

  var x0 = W * random(), x1 = W * random();
  var y0 = W * random(), y1 = W * random();
  context.fillRect(
      Math.min(x0,x1), Math.min(y0,y1),
      Math.abs(x0-x1), Math.abs(y0-y1));

  new live.Task(live.blip, 500);
};
once live.blip();

//print(live.counter);
//print(live.tasks[0]);

//==============================================================================
// 1323226133754.js

// simple rhythm:

var PERIOD = 2000;

once { // generate samples
  live.long = noise({ duration:PERIOD/2, gain:0.05 });
  live.short = noise({ duration:PERIOD/64, gain:0.1 });
}

live.loop = function () {

  setTimeout(function(){ play(live.long) }, PERIOD * 0/1);
  setTimeout(function(){ play(live.short) }, PERIOD * 1/4);
  setTimeout(function(){ play(live.short) }, PERIOD * 2/4);
  setTimeout(function(){ play(live.short) }, PERIOD * 3/4);
  setTimeout(function(){ play(live.short) }, PERIOD * 7/8);

  setTimeout(live.loop, PERIOD); // comment out to stop
};

once live.loop(); // start a loop

//==============================================================================
// 1323196209122.js

// juggling dots:

var X = function (a) { return (0.5 + Math.sin(2*a) / 3); };
var Y = function (a) { return (0.5 + Math.sin(3*a) / 3); };
var Z = function (a) { return (0.5 + Math.sin(8*a) / 2); };

live.juggle = function () {

  var T = 1000, t = (Date.now() % T) / T;
  context.clearRect(0, 0, innerWidth, innerHeight);
  context.font = 'bold 64pt Courier';
  for (var i = 0, N = 79; i < N; ++i) {
    var a = 2 * Math.PI * (i + t) / N;
    context.fillStyle = 'rgba(255,255,255,' + Z(a) + ')';
    context.fillText('.', innerWidth * X(a), innerHeight * Y(a));
  }

  setTimeout(live.juggle, 10); // comment out to stop
};

once live.juggle(); // erase the 'n' to start

//==============================================================================
// 1323134327691.js

// test for text-shadow:

var N = 20;
var W = innerWidth;
var H = innerHeight;

context.fillStyle = '#aaaaaa';
context.fillRect(W / N, H / N, W * (1 - 2 / N), H * (1 - 2 / N));

//==============================================================================
// 1323050746049.js

// simple am sine wave:

var duration = 1000;
var gain = 0.2;
var freq = middleC;
var omega = 2 * Math.PI * freq / sampleRate;
var samples = new Array(Math.round(duration * sampleRate));

for (var t = 0, T = samples.length; t < T; ++t) {
  var envelope = gain * 4 * (t + 1) * (T - t) / (T * T);
  samples[t] = envelope * Math.sin(omega * t);
}
var uri = WavEncoder.encode(samples);
live.audio = new Audio(uri);

once live.audio.play();

