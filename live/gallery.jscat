
//==============================================================================
// 1324384763822.js

// faray tone scale (by hand)

var tone = function (freq, duration, gain) {
  var data = []; // just an array
  for (var i=0, I=duration*sampleRate; i < I; ++i) {
    var env = (I - i) / I;
    var a = 2 * pi * freq / sampleRate * i;
    data[i] = sin(a) * gain * env;
  }
  return WavEncoder.encode(data);
}

var T = 500;

nonce { // generate samples
  var note = function(freq) { return tone(freq, T, 0.5); };
  live.scale = [
    note(1/1),
    note(5/4),
    note(4/3),
    note(7/5),
    note(3/2),
    note(8/5),
    note(5/3),
    note(7/4),
    note(2/1)
  ];
}

nonce live.n = 0;

live.S = function () {
  live.n = (live.n + 1) % live.scale.length;
  play(live.scale[live.n]);
  print(now());
  sync({delay:T,acuity:7}, live.S);
};

nonce live.S(); // start
nonce sync.clear(); // stop

print(live.scale.length)

//==============================================================================
// 1323367681157.js

// Hello World
// i am live code
// try changing me

var d = draw2d();
d.font = 'bold 64pt Courier';
d.fillStyle = '#55aa55';
d.textAlign = 'center';

live.hello = function () {
  draw2d().fillText(
      'Hello World!',
      1/8 * mouseX + 3/8 * windowW,
      1/8 * mouseY + 3/8 * windowH);

  after(0, live.hello); // to stop, comment out
};

once live.hello(); // to start, erase the 'n'
nonce clear();      // to stop, erase the 'n'

//==============================================================================
// 1323324421097.js

// petri net rhythm

var noise = function (duration, gain) {
  var data = []; // just an array
  for (var i=0, I=duration*sampleRate; i < I; ++i) {
    var env = (I - i) / I;
    data[i] = (2*random()-1) * gain * env;
  }
  return WavEncoder.encode(data);
}

var play = function (sound) {
  (new Audio(sound)).play();
};

var T = 3000;

once { // generate samples
  window.long = noise(T/4, 0.05);
  window.short = noise(T/32, 0.1);
}

var show = function (symbol) {
  var chain = symbol + (live.chain || '');
  print(live.chain = chain.slice(0,80));
};

live.L1 = function () {
  play(window.long);
  show('|');
  sync({delay:T/2,acuity:7}, live.L1);
};

live.S1 = function () {
  play(window.short);
  show('o');
  sync({delay:T/5}, random() > 5/12 ? live.S2 : live.S1);
};

live.S2 = function () {
  play(window.short);
  show('-');
  sync({delay:T/7}, random() > 5/12 ? live.S2 : live.S1);
};

once live.L1(); // start one of these
once live.S1(); // and a few of these

nonce sync.clear(); // uncomment to stop

//==============================================================================
// 1323319581185.js

/* TODO list ---------------------------------------
   ( X = resolved, W = won't fix )
 * remove/show trailing whitespace
 * ignore compile after whitespace expansion
 * $source.focus(setCaretToPreviousPosition)
 * line numbers in error messages (how?)
 * two-pane editor view for wide screens
 * search & replace
 * make leading whitespace visible
 * auto matching paren
 * auto indent
 * tab to indent (somehow...)
 W make caret more visible
 W autosave with multiple windows
 X move focus when deleting scripts
 X make error messages more visible (bg)
 X move focus to buttons when hide-cycling
 X add window reload button in su mode
 X allow error message window to resize to 1.5 lines
 */

//==============================================================================
// 1323319306053.js

// syncopated rhythm

var noise = function (duration, gain) {
  var data = []; // just an array
  for (var i=0, I=duration*sampleRate; i < I; ++i) {
    var env = (I - i) / I;
    data[i] = (2 * random() - 1) * gain * env;
  }
  return WavEncoder.encode(data);
}

var play = function (sound) {
  (new Audio(sound)).play();
};

var T = 3000;

once { // generate samples
  window.long = noise(T/2, 0.05);
  window.short = noise(T/64, 0.1);
}

live.running = 10;

live.L1 = function () {
  if (!live.running) return;
  play(window.long);
  console.log('L1');
  sync({delay:T/2,syncopate:-1/12}, live.L1);
};

live.S1 = function () {
  if (!live.running) return;
  play(window.short);
  console.log('S1');
  sync({delay:T/3}, live.S1);
};

live.S2 = function () {
  if (!live.running) return;
  play(window.short);
  console.log('S2');
  sync({delay:T/6}, live.S2);
};

once live.L1();
once live.S1();
once live.S2();

//==============================================================================
// 1323297175694.js

// simple continuous-time task manager

live.Task = function (action, delay) { // TODO mass, sharpness, phase
  this.action = action;
  this.delay = delay;
  this.remaining = delay;
  live.add(this);
};
live.Task.updateAll = function () {
  var tasks = live.tasks;
  var dt = now() - live.time;
  live.time = now();

  for (var i in tasks) {
    var task = tasks[i];
    if (task.remaining -= dt < 0) {
      try { task.action(); }
      catch (err) { print(err); } // XXX should be live.error(err)
      delete tasks[i];
    }
  }

  after(20, live.Task.updateAll);
};
once live.Task.updateAll(); // start

once {
  live.counter = 0;
  live.tasks = {};
  live.time = now();
  live.add = function (task) {
    live.tasks[live.counter++] = task;
    print(live.counter); // DEBUG
  };
}

// an example
live.blip = function () {
  var d = draw2d();
  d.fillStyle = '#222';
  d.fillRect(
    0,0,
    windowW * random(),
    windowH * random());

  //after(100, live.blip);
  new live.Task(live.blip, 500);
};
once live.blip();

//print(live.counter);
//print(live.tasks[0]);

//==============================================================================
// 1323226133754.js

// simple rhythm

var noise = function (duration, gain) {
  var data = []; // just an array
  for (var i=0, I=duration*sampleRate; i < I; ++i) {
    var env = (I - i) / I;
    data[i] = (2 * random() - 1) * gain * env;
  }
  return WavEncoder.encode(data);
}

var play = function (sound) {
  return function(){ (new Audio(sound)).play(); };
};

var T = 2000;

once { // generate samples
  window.long = noise(T/2, 0.05);
  window.short = noise(T/64, 0.1);
}

live.loop = function () {

  after(0, play(window.long));
  after(1/4*T, play(window.short));
  after(2/4*T, play(window.short));
  after(3/4*T, play(window.short));
  after(7/8*T, play(window.short));

  after(T, live.loop); // comment out to stop
};
once live.loop(); // start a loop

//==============================================================================
// 1323196209122.js

// juggling dots:

live.running = 10;

var X = function(a){return (0.5 + sin(2*a)/3)};
var Y = function(a){return (0.5 + sin(3*a)/3)};
var Z = function(a){return (0.5 + sin(8*a)/2)};

var d = draw2d();
d.font = 'bold 64pt Courier';

live.juggle = function () {
  if (!live.running) return;

  var T = 1000, t = (Date.now() % T) / T;
  var d = draw2d();
  for (var i=0, N=79; i < N; ++i) {
    var a = 2 * pi * (i + t) / N;
    d.fillStyle = 'rgba(255,255,255,' + Z(a) + ')';
    d.fillText('.', innerWidth*X(a), innerHeight*Y(a));
  }

  after(1, live.juggle);
};

once live.juggle();

//==============================================================================
// 1323134327691.js

// test for text-shadow

var d = draw2d();

var N = 20;

d.fillStyle = '#aaaaaa';
d.fillRect(windowW/N, windowH/N, windowW*(1-2/N), windowH*(1-2/N));

//==============================================================================
// 1323050746049.js

// sine wave (broken)

var T = 2000, t = (time % T) / T, dt = dtime / T;
if (t < dt) { // is true once per second
  var I = 5000;
  var data = new Array(I); // just an array
  for (i=0; i<I; ++i) {
    //e = 4/(I*I) * i * (I-i);
    data[i] = bound(0, 255, 255/2 * (1 + sin(i / 500)));
  }
  var audio = new Audio(WavEncoder.encode(data));
  audio.play();
}

//==============================================================================
// 1323050721692.js

// noise in a loop (broken)

var T = 1000, t = (time % T) / T, dt = dtime / T;
if (t < dt) { // is true once per second
  var data = []; // just an array
  for (var i=0; i<1000; i++) data[i] = 2 * random() - 1;
  var audio = new Audio(WavEncoder.encode(data));
  audio.play();
}

//==============================================================================
// 1322626006373.js

var range = function (n) {
  n = Number(n);
  var result = new Array(n);
  for (var i = 0; i < n; ++i) {
    result[i] = i;
  }
  return result;
};

range(10);

